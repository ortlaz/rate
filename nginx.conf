#user  nginx;

# кол-во ядер процессора на сервере
worker_processes  1;

error_log  logs/error.log warn;
error_log  logs/error.log  notice;
error_log  logs/error.log  info;

# file that will store the process ID
pid        logs/nginx.pid;
user   root admin;
worker_rlimit_nofile 1024;

# кол-во соединений с запросами юзеров
# + кол-во соединений с WSGI
events {
    worker_connections  1024;
}

# http block defines the parameters for how NGINX should handle HTTP web traffic
http {
    # типы поддерживаемых файлов
    include       mime.types;
    # тип файлов, отдаваемых юзеру по умолчанию
    default_type  text/html;
    # тип логов
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;
    # optimize the delivery of static content
    sendfile       on;
    tcp_nopush     on;
    tcp_nodelay    on;

    # the timeout value for keep-alive connections with the client
    #keepalive_timeout  0;
    keepalive_timeout  65;

    # Define the usage of the gzip compression algorithm to reduce the amount of data to transmit
    # gzip  off;

    # Include additional parameters for virtual host(s)/server(s)
#     include /etc/nginx/conf.d/*.conf;

    # Define the parameters for a specific virtual host/server
    server {
        # Define the server name, IP address, and/or port of the server
        listen       8080;
        server_name  localhost;

        # Define the specified charset to the “Content-Type” response header field
        charset utf-8;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        # Configure NGINX to deliver static content from the specified folder
        location /static {
        root rate/app;
        }

        location / {
            autoindex on;
            autoindex_exact_size off;
            # Define the directory where the contents being requested are stored
            root  rate/app/templates;
#             root   html;
            # Define the default page that will be served If no page was requested
            index  index.html;

            proxy_pass   http://localhost:5000;
            # for docker
            # proxy_pass http://name of the container running Gunicorn:8000;
            proxy_set_header Host $host;
            # http or https
            proxy_set_header X-Forwarded-Proto $scheme;
            # users ip-addr
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # Define the maximum file size on file uploads
            # client_max_body_size 5M;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        #  error_page   500 502 503 504  /50x.html;
        error_page 404 500 502 503 504 /error.html;
        location = /error.html {
            root  rate/app/templates;
        }

        # Configure NGINX to reverse proxy HTTP requests to the upstream server (Gunicorn (WSGI server))
#         location / {
#
#         }

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
#     include servers/*;
}
